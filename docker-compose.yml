version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    networks:
      - app-network

  listen_service_1:
    image: listen_service
    build:
      context: .
      dockerfile: Dockerfile.listenservice
    container_name: listen_service_1
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ConnectionStrings__RedisConnection=redis:6379
    # ports:
    #   - "9008:9008"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - app-network

  listen_service_2:
    image: listen_service
    build:
      context: .
      dockerfile: Dockerfile.listenservice
    container_name: listen_service_2
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ConnectionStrings__RedisConnection=redis:6379
    # ports:
    #   - "9009:9008"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - app-network

  jobs:
    image: jobs
    build:
      context: .
      dockerfile: Dockerfile.jobs
    container_name: jobs
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ConnectionStrings__RedisConnection=redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - app-network

  telegram:
    image: telegram
    build:
      context: .
      dockerfile: Dockerfile.telegram
    container_name: telegram
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ConnectionStrings__RedisConnection=redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - app-network

  demarket_api:
    image: demarket_api
    build:
      context: .
      dockerfile: Dockerfile.demarketapi
    container_name: demarket_api
    ports:
      - "8000:80"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ConnectionStrings__RedisConnection=redis:6379
      - ASPNETCORE_ENVIRONMENT=Production
    volumes:
      - /home/ubuntu/demarket/docs:/app/docs
    depends_on:
      - redis
    restart: unless-stopped

    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf.initial:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - demarket_api
    restart: unless-stopped
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - app-network

volumes:
  redis_data:
  nginx_logs:

networks:
  app-network:
    driver: bridge